/**
 * Module dependencies.
 */
import { OAuth2Client } from 'google-auth-library';
import { Strategy } from 'passport-strategy';
/**
 * `Strategy` constructor.
 *
 * The Google authentication strategy authenticates requests by verifying the
 * signature and fields of the token.
 *
 * Applications must supply a `verify` callback which accepts the `idToken`
 * coming from the user to be authenticated, and then calls the `done` callback
 * supplying a `parsedToken` (with all its information in visible form) and the
 * `googleId`.
 *
 * Options:
 * - `clientID` your Google application's client id (or several as Array)
 *
 * Examples:
 *
 * passport.use(new GoogleTokenStrategy({
 *     clientID: '12345.abcdefghijkl.apps.googleusercontent.com'// Specify the CLIENT_ID of the app that accesses the backend
 *    // Or, if multiple clients access the backend:
 *    //[CLIENT_ID_1, CLIENT_ID_2, CLIENT_ID_3]
 *   },
 *   function(parsedToken, googleId, done) {
 *     User.findOrCreate(..., function (err, user) {
 *       done(err, user);
 *     });
 *   }
 * ));
 *
 * @param {Object} options
 * @param {Function} verify
 * @api public
 */
export declare class GoogleTokenStrategy extends Strategy {
    name: string;
    googleAuthClient: OAuth2Client;
    verify: (...args: any[]) => void;
    clientID: string;
    passReqToCallback: boolean;
    audience: string[];
    constructor(options: (() => void) | any, verify?: (...args: any[]) => void);
    /**
     * Authenticate request by verifying the token
     *
     * @param {Object} req
     * @api protected
     */
    authenticate(req: any, options: any): void;
    /**
     * Verify signature and token fields
     *
     * @param {String} idToken
     * @param {String} clientID
     * @param {Function} done
     * @api protected
     */
    verifyGoogleToken(idToken: string, clientID: string | [], done: (...args: any[]) => void): void;
    /**
     * Gets the id token value from req using name for lookup in req.body, req.query,
     * and req.params.
     * @param {express.Request} req
     * @param {string} name  the key to use to lookup id token in req.
     * @api protected
     */
    private paramFromRequest;
    private getBearerToken;
}
